{"version":3,"file":"component---src-templates-series-jsx-e89e24c48d8a133f7646.js","mappings":"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","sources":["webpack://the-great-pang/./src/components/TagList/index.jsx","webpack://the-great-pang/./src/templates/Series.jsx","webpack://the-great-pang/./src/components/PostList/index.jsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nconst TagListWrapper = styled.div`\n  margin-bottom: 16px;\n  word-break: break-all;\n`;\n\nconst TagLink = styled.div`\n  display: inline-block;\n  padding: 3.6px 11.2px;\n  margin-right: 8px;\n  margin-bottom: 8px;\n  border-radius: 50px;\n  background-color: ${(props) =>\n    props.selected\n      ? props.theme.colors.selectedTagBackground\n      : props.theme.colors.tagBackground};\n  color: ${(props) =>\n    props.selected\n      ? props.theme.colors.selectedTagText\n      : props.theme.colors.tagText};\n  text-decoration: none;\n  font-size: 14.4px;\n  transition: all 0.2s;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.selected\n        ? props.theme.colors.hoveredSelectedTagBackground\n        : props.theme.colors.hoveredTagBackground};\n  }\n`;\n\nconst spaceToDash = (text) => {\n  return text;\n  // return text.replace(/\\s+/g, \"-\")\n};\n\nconst TagList = ({ tagList, count, selected }) => {\n  if (!tagList) return null;\n\n  if (!count) {\n    return (\n      <TagListWrapper>\n        {tagList.map((tag, i) => (\n          <Link key={JSON.stringify({ tag, i })} to={`/tags?q=${tag}`}>\n            <TagLink>{spaceToDash(tag)}</TagLink>\n          </Link>\n        ))}\n      </TagListWrapper>\n    );\n  }\n\n  return (\n    <TagListWrapper>\n      {tagList.map((tag, i) => (\n        <Link\n          key={JSON.stringify({ tag, i })}\n          to={\n            selected === tag.fieldValue ? '/tags' : `/tags?q=${tag.fieldValue}`\n          }\n        >\n          <TagLink selected={tag.fieldValue === selected}>\n            {spaceToDash(tag.fieldValue)} ({tag.totalCount})\n          </TagLink>\n        </Link>\n      ))}\n    </TagListWrapper>\n  );\n};\n\nexport default TagList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport styled from 'styled-components';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostList from 'components/PostList';\nimport Divider from 'components/Divider';\n\nimport blogConfig from '../../blog-config';\n\nconst Header = styled.div`\n  @media (max-width: 768px) {\n    padding: 0px 15px;\n  }\n`;\n\nconst Title = styled.h1`\n  margin-bottom: 15px;\n  line-height: 1.2;\n  font-size: 32px;\n  font-weight: bold;\n  color: ${(props) => props.theme.colors.text};\n  word-break: break-all;\n`;\n\nconst Subtitle = styled.h3`\n  display: inline-block;\n  padding: 2px 3px;\n  margin-top: 32px;\n  margin-bottom: 8px;\n  font-size: 20px;\n  font-weight: bold;\n  background-color: ${(props) => props.theme.colors.text};\n  color: ${(props) => props.theme.colors.bodyBackground};\n  letter-spacing: -1px;\n`;\n\nconst SeriesInform = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  color: ${(props) => props.theme.colors.text};\n\n  & > span {\n    margin: 0 3px;\n  }\n`;\n\nconst Date = styled.span`\n  color: ${(props) => props.theme.colors.tertiaryText};\n`;\n\nconst Series = ({ pageContext, data }) => {\n  const { description, siteUrl } = blogConfig;\n  const seriesName = pageContext.series;\n  const posts = data.posts.nodes;\n\n  return (\n    <Layout>\n      <SEO\n        title={`SERIES: ${seriesName}`}\n        description={description}\n        url={siteUrl}\n      />\n\n      <Header>\n        <Subtitle> SERIES </Subtitle>\n        <Title> {seriesName} </Title>\n\n        <SeriesInform>\n          <span>{posts.length} Posts</span>\n          <span>Â·</span>\n          <Date>\n            Last updated on {posts[posts.length - 1].frontmatter.date}\n          </Date>\n        </SeriesInform>\n\n        <Divider />\n      </Header>\n\n      <PostList postList={posts} />\n    </Layout>\n  );\n};\n\nexport default Series;\n\nexport const pageQuery = graphql`\n  query BlogSeriesBySeriesName($series: String) {\n    posts: allMarkdownRemark(\n      sort: { order: ASC, fields: [frontmatter___date] }\n      filter: { frontmatter: { series: { eq: $series } } }\n    ) {\n      nodes {\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          update(formatString: \"MMM DD, YYYY\")\n          title\n          tags\n          emoji\n        }\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport _ from 'lodash';\n\nimport { Link } from 'gatsby';\n\nimport Title from 'components/Title';\nimport Divider from 'components/Divider';\nimport TagList from 'components/TagList';\nimport DisplayAds from '../DisplayAd';\n\nconst PostListWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 10px;\n  }\n`;\n\nconst PostWrapper = styled.div`\n  position: relative;\n  top: 0;\n  transition: all 0.5s;\n\n  @media (max-width: 768px) {\n    padding: 0 5px;\n  }\n`;\n\nconst ContainerOfDateAndSeries = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Date = styled.p`\n  // margin-bottom: 16px;\n  padding: 0;\n  margin: 0;\n  font-size: 14.4px;\n  color: ${(props) => props.theme.colors.tertiaryText};\n`;\nconst SeriesName = styled.p`\n  font-size: 14.4px;\n  // float: right;\n  color: ${(props) => props.theme.colors.text};\n  text-decoration-line: underline;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Excerpt = styled.p`\n  margin-bottom: 32px;\n  line-height: 1.7;\n  font-size: 15px;\n  color: ${(props) => props.theme.colors.secondaryText};\n  word-break: break-all;\n`;\n\nconst EmojiWrapper = styled.div`\n  float: left;\n  margin-right: 15px;\n`;\n\nconst checkIsScrollAtBottom = () => {\n  return (\n    document.documentElement.scrollHeight -\n      document.documentElement.scrollTop <=\n    document.documentElement.clientHeight + 100\n  );\n};\n\nconst PostList = ({ postList }) => {\n  const [postCount, setPostCount] = useState(10);\n\n  const handleMoreLoad = _.throttle(() => {\n    if (checkIsScrollAtBottom() && postCount < postList.length) {\n      setTimeout(() => setPostCount(postCount + 10), 300);\n    }\n  }, 250);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleMoreLoad);\n\n    return () => {\n      window.removeEventListener('scroll', handleMoreLoad);\n    };\n  }, [postCount, postList]);\n\n  useEffect(() => {\n    setPostCount(10);\n  }, [postList]);\n\n  return (\n    <PostListWrapper>\n      {postList.slice(0, postCount).map((post, i) => {\n        const { title, date, tags, emoji, series } = post.frontmatter;\n        const { excerpt } = post;\n        const { slug } = post.fields;\n        return (\n          <React.Fragment key={JSON.stringify({ slug, date })}>\n            <PostWrapper>\n              <Title size=\"bg\">\n                {emoji ? <EmojiWrapper>{emoji}</EmojiWrapper> : ''}\n                <Link to={slug}>{title}</Link>\n              </Title>\n              <ContainerOfDateAndSeries>\n                <Date>{date}</Date>\n                <Link to={`/series/${_.replace(series, /\\s/g, '-')}`}>\n                  <SeriesName>{series}</SeriesName>\n                </Link>\n              </ContainerOfDateAndSeries>\n              <Excerpt>{excerpt}</Excerpt>\n              <TagList tagList={tags} />\n            </PostWrapper>\n            {(i == 0 || i == 2) && <DisplayAds />}\n            {postCount - 1 !== i && postList.length - 1 !== i && (\n              <Divider mt=\"48px\" mb=\"32px\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </PostListWrapper>\n  );\n};\n\nexport default PostList;\n"],"names":["TagListWrapper","styled","div","withConfig","displayName","componentId","TagLink","props","selected","theme","colors","selectedTagBackground","tagBackground","selectedTagText","tagText","hoveredSelectedTagBackground","hoveredTagBackground","_ref","tagList","count","React","map","tag","i","Link","key","JSON","stringify","to","fieldValue","totalCount","Header","Title","h1","text","Subtitle","h3","bodyBackground","SeriesInform","Date","span","tertiaryText","pageContext","data","description","siteUrl","blogConfig","seriesName","series","posts","nodes","Layout","SEO","title","url","length","frontmatter","date","Divider","PostList","postList","PostListWrapper","PostWrapper","ContainerOfDateAndSeries","p","SeriesName","Excerpt","secondaryText","EmojiWrapper","postCount","setPostCount","useState","handleMoreLoad","_throttle","document","documentElement","scrollHeight","scrollTop","clientHeight","setTimeout","useEffect","window","addEventListener","removeEventListener","slice","post","tags","emoji","excerpt","slug","fields","size","_replace","TagList","DisplayAds","mt","mb"],"sourceRoot":""}