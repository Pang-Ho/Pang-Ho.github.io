{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"🧪 테스트 환경 아래 명령어를 통해  템플릿을 이용하는 사람의 경우거나 블로그에 댓글을 를 통해 만들고 싶은 경우 참고만 하면 된다. 🍳 giscus가 무엇인가? giscus는 의 을 통해 댓글 기능을 만들어주는 편리한 라이브러리입니다. 개발자는 에서  기능을 열어두고, giscus 홈페이지에서  주소와 여러 설정을 추가하면 giscus 정보를 받을 수 …","fields":{"slug":"/giscus/"},"frontmatter":{"date":"March 13, 2025","title":"giscus 시작하기","tags":["gatsby"],"emoji":"✋","series":"gatsby"},"rawMarkdownBody":"\r\n## 🧪 테스트 환경\r\n\r\n아래 명령어를 통해 `gatsby-starter-rundevelrun` 템플릿을 이용하는 사람의 경우거나 블로그에 댓글을 `github`를 통해 만들고 싶은 경우 참고만 하면 된다.\r\n\r\n```shell\r\ngatsby new your-blog-name https://github.com/rundevelrun/gatsby-starter-rundevelrun.git\r\n```\r\n\r\n## 🍳 giscus가 무엇인가?\r\n\r\ngiscus는 `github repository`의 `Discussion`을 통해 댓글 기능을 만들어주는 편리한 라이브러리입니다.\r\n\r\n개발자는 `github repository`에서 `Discussion` 기능을 열어두고, giscus 홈페이지에서 `github repository` 주소와 여러 설정을 추가하면 giscus 정보를 받을 수 있습니다.\r\n\r\n## ☝ giscus 설정 방법\r\n\r\n1. 댓글 데이터를 담아둘 `repository`에 접속한다.\r\n   - `public repository`인지 확인한다.\r\n   - [giscus 설치 페이지](https://github.com/apps/giscus) 접속하여 giscus를 설치한다.\r\n   - `repository settings`로 들어가서 `Features`에 있는 `Discussions` 체크박스에 체크한다.\r\n2. [giscus 홈페이지](https://giscus.app/ko) 접속하여 설정한다.\r\n   - 저장소 명을 입력한다.\r\n   - Discussions 연결 방법을 선택한다.\r\n   - Discuussion 카테고리를 선택한다. (Announcements를 권장합니다.)\r\n   - 원하는 테마와 기능을 설정하고, `giscus script`를 복사한다.\r\n   ```javascript\r\n   //예시\r\n   <script\r\n     src=\"https://giscus.app/client.js\"\r\n     data-repo=\"[ENTER REPO HERE]\"\r\n     data-repo-id=\"[ENTER REPO ID HERE]\"\r\n     data-category=\"[ENTER CATEGORY NAME HERE]\"\r\n     data-category-id=\"[ENTER CATEGORY ID HERE]\"\r\n     data-mapping=\"pathname\"\r\n     data-strict=\"0\"\r\n     data-reactions-enabled=\"1\"\r\n     data-emit-metadata=\"0\"\r\n     data-input-position=\"bottom\"\r\n     data-theme=\"preferred_color_scheme\"\r\n     data-lang=\"ko\"\r\n     crossorigin=\"anonymous\"\r\n     async\r\n   ></script>\r\n   ```\r\n\r\n## ✌ 개인 블로그에서 giscus 컴포넌트 만들어서 사용하기\r\n\r\n1. giscus 라이브러리 설치\r\n\r\n   ```shell\r\n   npm i giscus\r\n   ```\r\n\r\n2. 컴포넌트 생성\r\n\r\n   `giscus script`에서 받은 데이터를 컴포넌트에 넣어서 사용하면 완성!\r\n\r\n   ```javascript\r\n   import Giscus from '@giscus/react';\r\n\r\n   export default function MyApp() {\r\n     return (\r\n       <Giscus\r\n         id=\"comments\"\r\n         repo=\"[ENTER REPO HERE]\"\r\n         repoId=\"[ENTER REPO ID HERE]\"\r\n         category=\"[ENTER CATEGORY NAME HERE]\"\r\n         categoryId=\"[ENTER CATEGORY ID HERE]\"\r\n         mapping=\"pathname\"\r\n         term=\"Welcome to @giscus/react component!\"\r\n         reactionsEnabled=\"1\"\r\n         emitMetadata=\"0\"\r\n         inputPosition=\"bottom\"\r\n         theme=\"light\"\r\n         lang=\"ko\"\r\n         loading=\"lazy\"\r\n       />\r\n     );\r\n   }\r\n   ```\r\n\r\n   > [giscus Github 주소](https://github.com/giscus/giscus-component) 참고하였습니다.\r\n\r\n## ✌ rundevelrun/gatsby-starter-rundevelrun 템플릿 전용 설정\r\n\r\n`blog-config.js`의 내용 수정\r\n\r\n```javascript\r\nmodule.exports = {\r\n   ...\r\n   links: {\r\n      ...\r\n   },\r\n   giscus: {\r\n      repo=\"[ENTER REPO HERE]\"\r\n      repoId=\"[ENTER REPO ID HERE]\"\r\n      category=\"[ENTER CATEGORY NAME HERE]\"\r\n      categoryId=\"[ENTER CATEGORY ID HERE]\"\r\n      mapping=\"pathname\"\r\n      strict=\"0\"\r\n      reactionsEnabled: '1',\r\n      inputPosition=\"bottom\"\r\n      lang: 'ko',\r\n   },\r\n   adsense: {\r\n      ...\r\n   }\r\n}\r\n```\r\n\r\n## 👍 댓글 창 확인\r\n\r\n![giscus 댓글 스크린샷](./../../../images/how-to/giscus-screenshot.png)\r\n"},{"excerpt":"리액트 폴더구조 회사에서 처음 리액트 프로젝트를 시작할 때 가장 이해가 안되던 부분이 폴더구조였다.\r\n당시  폴더 아래에는 메뉴 단위로 가져갔고, 공통 컴포넌트는  아래에 파일 단위로만 들어가 있었다.\r\n또한 와 의 차이를 몰랐었다. 중간에 프로젝트를 투입하게 되면서 내가 보는 페이지가 어떤 파일인지 유추가 안되고, 파일을 어디에 둬야할지 고민이 되었다.…","fields":{"slug":"/react/"},"frontmatter":{"date":"March 11, 2025","title":"React Folder","tags":["react"],"emoji":"🚀","series":"React"},"rawMarkdownBody":"\r\n# 리액트 폴더구조\r\n\r\n회사에서 처음 리액트 프로젝트를 시작할 때 가장 이해가 안되던 부분이 폴더구조였다.\r\n당시 `src` 폴더 아래에는 메뉴 단위로 가져갔고, 공통 컴포넌트는 `components` 아래에 파일 단위로만 들어가 있었다.\r\n또한 `public/assets`와 `src/assets`의 차이를 몰랐었다.\r\n\r\n중간에 프로젝트를 투입하게 되면서 내가 보는 페이지가 어떤 파일인지 유추가 안되고, 파일을 어디에 둬야할지 고민이 되었다.\r\n\r\n다른 사람들은 어떤 폴더구조를 쓸까? 에 대한 내용과 내가 사용하는 폴더 구조를 소개하려고 한다.\r\n\r\n> 기본적으로 폴더구조는 프로젝트 상황과 사용하는 라이브러리, 디자인 패턴에 맞게 수정하는게 맞다고 생각한다.\r\n\r\n## create-react-app 폴더구조\r\n\r\n```\r\nmy-app/\r\n├── node_modules/       # 프로젝트에 필요한 모든 의존성이 저장되는 폴더\r\n├── public/             # 정적 파일이 저장되는 폴더\r\n│   ├── favicon.ico     # 브라우저 탭에 표시되는 아이콘\r\n│   ├── index.html      # React 앱이 로드되는 기본 HTML 파일\r\n│   ├── logo192.png     # 기본 제공 로고 이미지 (192x192 크기)\r\n│   ├── logo512.png     # 기본 제공 로고 이미지 (512x512 크기)\r\n│   ├── manifest.json   # PWA 관련 설정 파일\r\n│   ├── robots.txt      # 검색 엔진 크롤러 관련 설정 파일\r\n│   └── ...\r\n├── src/                # 애플리케이션의 주요 소스 코드가 들어가는 폴더\r\n│   ├── App.css         # `App` 컴포넌트의 스타일 정의\r\n│   ├── App.js          # 주요 애플리케이션 컴포넌트\r\n│   ├── App.test.js     # `App` 컴포넌트의 테스트 파일\r\n│   ├── index.css       # 전역 스타일 정의\r\n│   ├── index.js        # 애플리케이션의 진입점 파일\r\n│   ├── logo.svg        # 기본 제공 React 로고 (SVG 형식)\r\n│   ├── reportWebVitals.js # 성능 측정 관련 코드\r\n│   ├── setupTests.js   # 테스트 설정 파일 (Jest)\r\n│   └── ...\r\n├── .gitignore          # Git에서 무시할 파일 목록\r\n├── package.json        # 프로젝트 및 의존성 설정 파일\r\n├── README.md           # 프로젝트 설명 파일\r\n├── yarn.lock / package-lock.json  # 의존성 고정 파일\r\n└── ...\r\n```\r\n\r\n- 리액트를 처음 시작할 때 바로 볼 수 있는 폴더구조이다.\r\n  리액트를 처음 하는 사람한테는 src 내부 구조가 없어 폴더를 어떻게 만들지 고민이 된다.\r\n\r\n### src 폴더 구체화\r\n\r\n```\r\nsrc/\r\n├── components/       # 재사용 가능한 UI 컴포넌트\r\n├── pages/            # 주요 페이지 구성 요소\r\n├── hooks/            # 사용자 정의 훅\r\n├── services/         # API 호출 및 비즈니스 로직\r\n├── types/            # 타입\r\n├── utils/            # 유틸리티 함수\r\n├── context/          # React Context API 관련 코드\r\n└── assets/           # 이미지, 폰트, 아이콘 등 정적 리소스\r\n```\r\n\r\n- Chat GPT는 `src` 구조를 위 처럼 확장하는 것을 추천한다. 페이지 단위로 파일을 만들고, 재사용이 가능한 컴포넌트는 따로 관리하며\r\n  커스텀 훅도 따로 관리한다. 실제로 파일들을 넣어보자\r\n\r\n```\r\nsrc/\r\n├── components/       # 재사용 가능한 UI 컴포넌트\r\n│\t\t└── board-header.tsx\r\n├── pages/            # 주요 페이지 구성 요소\r\n│       └── board-page.tsx\r\n├── hooks/            # 사용자 정의 훅\r\n│\t\t└── use-board.ts\r\n├── services/         # API 호출 및 비즈니스 로직\r\n│\t\t└── board-api.ts\r\n├── types/            # 타입\r\n│\t\t└── board.ts\r\n├── utils/            # 유틸리티 함수\r\n│\t\t└── date-util.ts\r\n├── context/          # React Context API 관련 코드\r\n├── assets/           # 이미지, 폰트, 아이콘 등 정적 리소스\r\n│\t\t└── image1.png\r\n...\r\n```\r\n\r\n- 첫 프로젝트 때 이러한 구조가 되었었다. 게시판을 위 처럼 개발했을 때 수정이 필요한 경우\r\n  광범위하게 흩어진 코드를 찾으러 다녀야해서 너무 힘들었다.\r\n\r\n> 그래서 생각한 것은\r\n>\r\n> 1. URL 경로와 페이지 컴포넌트는 보통 1 : 1 이니까 경로에 맞게 폴더 구조를 만들기\r\n> 2. 특성이 같고, 수정사항이 많은 파일의 경우는 같은 곳에 넣어두자\r\n\r\n## 내가 사용하던 폴더 구조\r\n\r\n- 아래 조건들에 맞춰 `pages` 폴더를 좀더 구체화 하였다.\r\n  - 프로젝트 규모가 작다\r\n  - 라우팅 되는 URL 경로 구조와 `pages` 폴더 구조가 같도록 한다\r\n    - 폴더로 라우팅 구조 파악 가능\r\n  - 중요 로직은 커스텀 훅에서 관리한다\r\n    - UI와 로직 분리\r\n\r\n```\r\nsrc/\r\n├── components/                     # 재사용 가능한 UI 컴포넌트\r\n├── pages/                          # 주요 페이지 구성 요소\r\n│       └── board/                  # URL 경로\r\n│            ├── components/        # 종속된 UI 컴포넌트\r\n│            │    ├── hooks/        # 종속된 커스텀 훅\r\n│\t\t         │    │    └── use-board-header.ts\r\n│\t\t         │    │\r\n│\t\t         │    └── board-header.tsx\r\n│            ├── hooks/             # 종속된 커스텀 훅\r\n│\t\t         │    └── use-board.ts\r\n│            ├── schema/            # hook-form 스키마\r\n│\t\t         │    └── board-schema.ts\r\n│            ├── api/               # API 호출\r\n│\t\t         │    └── board-api.ts\r\n│            ├── models/            # 타입\r\n│\t\t         │    └── board.ts\r\n│            └── board-page.tsx\r\n│\r\n├── hooks/            # 전역으로 사용하는 사용자 정의 훅\r\n├── apis/             # 전역으로 사용하는 API 호출\r\n├── models/           # 전역으로 사용하는 타입\r\n├── utils/            # 유틸리티 함수\r\n├── assets/           # 이미지, 폰트, 아이콘 등 정적 리소스\r\n├── routers/          # 라우팅 관련 컴포넌트\r\n├── stores/           # 상태관리 라이브러리 상태\r\n├── App.tsx           # 최상위 컴포넌트\r\n└──\r\n```\r\n\r\n`board` 경로에는 이제 한 곳에서 소스를 한 눈에 확인할 수 있고, 관리 포인트도 좁아졌다.\r\n프로젝트를 혼자하는 것도 아니고, 새로 들어오는 개발자에게 폴더 구조를 몇 시간동안 강의할 것이 아니라면\r\n이해가 가는 선에서 구조를 만들어주는 방향은 정말 좋은 것 같다.\r\n\r\n또한 커스텀 훅 패턴으로 훅에 로직을 모두 넣어두고 컴포넌트에서 불러오는 방식이 유지보수 방면에서 좋다고 느꼈다.\r\nUI 컴포넌트에서 UI 소스 부분에 서비스 로직이 들어있는 경우 소스 보기가 불편한 경우가 많았다..\r\n\r\n## 유명한 FSD\r\n\r\n위 구조를 보면 `게시판`이라는 특징을 가진 기능을 `board` 폴더로 묶은 모습을 볼 수 있다.\r\n같은 특징을 가진 소스는 한 곳으로 모아두자 라는 느낌으로 묶은 것인데, `feature`와 관련된 유명한 아키텍처 방법론으로 `FSD`가 있다.\r\n물론 내가 사용하던 폴더 구조와는 많이 다르게 생겼다.\r\n`layer`로 둬서 같은 엄격하게 폴더에 들어갈 소스 위치를 구분하고 `feature`에서 기능을 묶는 방법론이다.\r\n\r\n![FSD Scheme.png](FSD Scheme.png)\r\n\r\n위 사진만으로 이해가 되지않지만, FSD 홈페이지를 가보면, 예제와 마이그레이션 방법도 친절히 나와있다.\r\n\r\n[FSD 마이그레이션 방법](https://feature-sliced.design/docs/guides/migration/from-v1) 그 중에 `layer` 내용만 가져와보겠다.\r\n\r\n- FSD Layer\r\n  - /app — application initialization layer\r\n    - Previous versions: app, core, init, src/index (and this happens)\r\n  - /processes — business process layer\r\n    - Previous versions: processes, flows, workflows\r\n  - /pages — application page layer\r\n    - Previous versions: pages, screens, views, layouts, components, containers\r\n  - /features — functionality parts layer\r\n    - Previous versions: features, components, containers\r\n  - /entities — business entity layer\r\n    - Previous versions: entities, models, shared\r\n  - /shared — layer of reused infrastructure code 🔥\r\n    - Previous versions: shared, common, lib\r\n\r\n여기서 크게 `app / pages / features` 만 봐도 좋다.\r\n\r\n```\r\nsrc/\r\n├── app\r\n│       ├── layout/\r\n│       ├── providers/\r\n│       ├── routers/\r\n│       └── App.tsx\r\n├── pages\r\n│       └── board/\r\n│            └── board-page.tsx\r\n├── features\r\n│       └── board/\r\n│            └── ui/\r\n│\t\t          └── board-header.tsx\r\n├── entities\r\n│       └── board/\r\n│\t\t     └── types.ts\r\n├── shared\r\n│       └── api/\r\n│            └── board/\r\n│\t\t          └── board-api.ts\r\n│       └── assets/\r\n│       └── lib/\r\n└──\r\n```\r\n\r\n크게 내용을 넣진 않았지만, `app` > `pages` > `features` > `entities` > `shared` 형식으로 층을 나누어서 자기보다 아래에 있는 층만\r\n참조해서 가져오는 방식이다.\r\n복잡하지만 상당히 큰 프로젝트에는 모든 기능이 나눠져있어 관리하는 부분에선 좋을 것이다.\r\n\r\n## MIT 리액트 아키텍처\r\n\r\n[MIT 리액트 아키텍처](https://github.com/alan2207/bulletproof-react/)\r\n\r\n리액트 아키텍처 구조를 가이드처럼 만들어둔 레포가 있다. `Star 29k` 가 넘어간 유명한 레포며, `feature`를 기준으로 폴더를 설계하였다.\r\n`nextjs 앱`, `nextjs 웹`, `react-vite` 세개의 구조를 보여준다.\r\n\r\n> bulletproof 는 안정적인 코드를 뜻한다.\r\n\r\n```\r\nsrc/\r\n├── features\r\n│       └── comments/\r\n│            └── api/\r\n│\t\t         └── components/\r\n└──\r\n```\r\n\r\n`feature` 폴더 하나를 기준으로 보면, 내가 사용하는 폴더구조와 비슷하게 한 곳에서 관련된 소스들을 관리한다.\r\n하지만 `FSD`와 비슷하게 `app` 폴더에서 어플리케이션 구조를 만든다. `pages` 폴더 없이 `app`폴더에서 모두 관리한다.\r\n\r\n```\r\nsrc/features/awesome-feature\r\n|\r\n+-- api         # exported API request declarations and api hooks related to a specific feature\r\n|\r\n+-- assets      # assets folder can contain all the static files for a specific feature\r\n|\r\n+-- components  # components scoped to a specific feature\r\n|\r\n+-- hooks       # hooks scoped to a specific feature\r\n|\r\n+-- stores      # state stores for a specific feature\r\n|\r\n+-- types       # typescript types used within the feature\r\n|\r\n+-- utils       # utility functions for a specific feature\r\n```\r\n\r\n## 정리\r\n\r\n`FSD`, `bulletproof-react repository`를 구경해봤다. `feature` 폴더에 기능 기준으로 컴포넌트를 만들고, 필요한 `api` 호출이나 종속된 컴포넌트의 경우 같은 공간에 만들어 소스 확인할 때 이리저리 움직이지 않게 만드는 모습을 보인다. `feature` 방식을 이용해볼까 생각중이다. 물론 마이그레이션까지 하면서 진행할 생각은 없다.\r\n\r\n프로젝트가 진행되면서 공통적으로 만들어야하는 기능이 많아지는 경우 `src/component` 폴더가 매우 커졌던 경험이 있다. 즐겨찾기가 되는 버튼형 아이콘을 만들 때 기능에 치중한 컴포넌트이니까 `src/component/feature` 폴더를 만들거나, `src/component/feature` 폴더를 만들어서 한 곳에 만들고, `src/component/ui` 폴더에는 기능이 없는 컴포넌트는 어떤가 싶기도 하다.\r\n\r\n> 운영하는 시스템에서 조금 신경쓰일정도로 느린 화면들이 있는데, `SSR`을 사용하면 조금 나아질까 싶어 Nextjs를 공부하고있다.\r\n>\r\n> 사용하던 폴더구조를 보니 Nextjs의 페이지 라우팅 구조와 비슷한 모습을 보여 놀랐다.\r\n"},{"excerpt":"🧪 테스트 환경 NodeJS v22.13.0 \r\nyarn 1.22.22 🛠️ 환경 설정 NodeJS↗ 설치 yarn 설치 gatsby-cli 설치 Gatsby 블로그 생성 🚀 개발 환경 구동 아래 과정을 거친 후 으로 접속 의존성 패키지 설치 구동 구동 방법은 사용하는 Gatsby 템플릿마다  에 작성된 yarn 명령어는 다르겠지만, 대부분 동일하게  명령…","fields":{"slug":"/gatsby/"},"frontmatter":{"date":"January 18, 2025","title":"Gatsby 블로그 시작하기","tags":["gatsby"],"emoji":"✋","series":"gatsby"},"rawMarkdownBody":"\r\n## 🧪 테스트 환경\r\n\r\n> NodeJS v22.13.0 <br/>\r\n> yarn 1.22.22\r\n\r\n## 🛠️ 환경 설정\r\n\r\n1. [NodeJS↗](https://nodejs.org/ko/download) 설치\r\n2. yarn 설치\r\n   ```shell\r\n   npm install -g yarn\r\n   ```\r\n3. gatsby-cli 설치\r\n   ```shell\r\n   yarn global add gatsby-cli\r\n   ```\r\n4. Gatsby 블로그 생성\r\n\r\n   ```shell\r\n   gatsby new [your-blog-name] [사용하고 싶은 Gatsby 템플릿]\r\n\r\n   예시 : gatsby new your-blog-name https://github.com/rundevelrun/gatsby-starter-rundevelrun.git\r\n   ```\r\n\r\n## 🚀 개발 환경 구동\r\n\r\n아래 과정을 거친 후 `http://localhost:8000`으로 접속\r\n\r\n1. 의존성 패키지 설치\r\n\r\n   ```shell\r\n   cd your-blog-name\r\n   yarn install\r\n   ```\r\n\r\n2. 구동\r\n\r\n   구동 방법은 사용하는 Gatsby 템플릿마다 `package.json` 에 작성된 yarn 명령어는 다르겠지만, 대부분 동일하게 `gatsby develop` 명령어를 사용하시면 됩니다.\r\n\r\n   **이후 내용부터는 `https://github.com/rundevelrun/gatsby-starter-rundevelrun.git` 템플릿을 기준으로 설명서가 작성되었습니다.**\r\n\r\n   ```shell\r\n   yarn develop\r\n   ```\r\n\r\n## ☺️ 사용자화\r\n\r\n`blog-config.js`의 내용 수정\r\n\r\n```javascript\r\nmodule.exports = {\r\n  title: \"YOUR:BLOG:NAME\",    // SEO Blog title\r\n  headerTitle: \"YOUR:<em style='color:#ed6c02'>BLOG</em>:NAME\", // Logo 1\r\n  headerSubTitle: \"<em style='color:#ed6c02'>YOUR</em>:BLOG:<em style='color:#ed6c02'>NAME</em>\", // Logo 2\r\n  copyright: \"©YOUR:BLOG:NAME\", // copyright in footer\r\n  author: \"YOUR:NAME\",  // Your Name\r\n  siteUrl: \"https://6developer.com/\", // Your Site URL\r\n  description: \"Hi, Nice to meet you !\",  // Blog description\r\n  links: {\r\n    github: \"https://github.com/rundevelrun\",\r\n    ...\r\n  },\r\n  giscus: {\r\n    ...\r\n  },\r\n  adsense: {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n## 📝 게시글 작성\r\n\r\n1. `contents/posts` 폴더에 게시글 파일 생성 (두가지 방법)\r\n   1. pathname으로 사용할 이름의 폴더를 만들고 하위에 'index.md'를 생성\r\n   2. pathname으로 사용할 이름으로 `*.md` 파일 생성\r\n2. frontmatter 작성\r\n   ```yaml\r\n   ---\r\n   emoji: '🚀'\r\n   title: '어떻게 시작할까요?'\r\n   date: 2025-01-19 13:53:00\r\n   update: 2025-01-19 13:53:00\r\n   tags:\r\n     - rundevelrun\r\n     - howto\r\n   series: 'Gatsby 블로그 시작하기'\r\n   ---\r\n   ```\r\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}