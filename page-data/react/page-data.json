{"componentChunkName":"component---src-templates-post-jsx","path":"/react/","result":{"data":{"site":{"siteMetadata":{"title":"THE GREAT PANG"}},"markdownRemark":{"id":"ae302bf4-08cb-5b69-bd38-5b561f7c6074","excerpt":"리액트 폴더구조 회사에서 처음 리액트 프로젝트를 시작할 때 가장 이해가 안되던 부분이 폴더구조였다.\n당시  폴더 아래에는 메뉴 단위로 가져갔고, 공통 컴포넌트는  아래에 파일 단위로만 들어가 있었다.\n또한 와 의 차이를 몰랐었다. 중간에 프로젝트를 투입하게 되면서 내가 보는 페이지가 어떤 파일인지 유추가 안되고, 파일을 어디에 둬야할지 고민이 되었다. 다…","html":"<h1 id=\"리액트-폴더구조\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%8F%B4%EB%8D%94%EA%B5%AC%EC%A1%B0\" aria-label=\"리액트 폴더구조 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>리액트 폴더구조</h1>\n<p>회사에서 처음 리액트 프로젝트를 시작할 때 가장 이해가 안되던 부분이 폴더구조였다.\n당시 <code class=\"language-text\">src</code> 폴더 아래에는 메뉴 단위로 가져갔고, 공통 컴포넌트는 <code class=\"language-text\">components</code> 아래에 파일 단위로만 들어가 있었다.\n또한 <code class=\"language-text\">public/assets</code>와 <code class=\"language-text\">src/assets</code>의 차이를 몰랐었다.</p>\n<p>중간에 프로젝트를 투입하게 되면서 내가 보는 페이지가 어떤 파일인지 유추가 안되고, 파일을 어디에 둬야할지 고민이 되었다.</p>\n<p>다른 사람들은 어떤 폴더구조를 쓸까? 에 대한 내용과 내가 사용하는 폴더 구조를 소개하려고 한다.</p>\n<blockquote>\n<p>기본적으로 폴더구조는 프로젝트 상황과 사용하는 라이브러리, 디자인 패턴에 맞게 수정하는게 맞다고 생각한다.</p>\n</blockquote>\n<h2 id=\"create-react-app-폴더구조\" style=\"position:relative;\"><a href=\"#create-react-app-%ED%8F%B4%EB%8D%94%EA%B5%AC%EC%A1%B0\" aria-label=\"create react app 폴더구조 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>create-react-app 폴더구조</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">my-app/\n├── node_modules/       # 프로젝트에 필요한 모든 의존성이 저장되는 폴더\n├── public/             # 정적 파일이 저장되는 폴더\n│   ├── favicon.ico     # 브라우저 탭에 표시되는 아이콘\n│   ├── index.html      # React 앱이 로드되는 기본 HTML 파일\n│   ├── logo192.png     # 기본 제공 로고 이미지 (192x192 크기)\n│   ├── logo512.png     # 기본 제공 로고 이미지 (512x512 크기)\n│   ├── manifest.json   # PWA 관련 설정 파일\n│   ├── robots.txt      # 검색 엔진 크롤러 관련 설정 파일\n│   └── ...\n├── src/                # 애플리케이션의 주요 소스 코드가 들어가는 폴더\n│   ├── App.css         # `App` 컴포넌트의 스타일 정의\n│   ├── App.js          # 주요 애플리케이션 컴포넌트\n│   ├── App.test.js     # `App` 컴포넌트의 테스트 파일\n│   ├── index.css       # 전역 스타일 정의\n│   ├── index.js        # 애플리케이션의 진입점 파일\n│   ├── logo.svg        # 기본 제공 React 로고 (SVG 형식)\n│   ├── reportWebVitals.js # 성능 측정 관련 코드\n│   ├── setupTests.js   # 테스트 설정 파일 (Jest)\n│   └── ...\n├── .gitignore          # Git에서 무시할 파일 목록\n├── package.json        # 프로젝트 및 의존성 설정 파일\n├── README.md           # 프로젝트 설명 파일\n├── yarn.lock / package-lock.json  # 의존성 고정 파일\n└── ...</code></pre></div>\n<ul>\n<li>리액트를 처음 시작할 때 바로 볼 수 있는 폴더구조이다.\n리액트를 처음 하는 사람한테는 src 내부 구조가 없어 폴더를 어떻게 만들지 고민이 된다.</li>\n</ul>\n<h3 id=\"src-폴더-구체화\" style=\"position:relative;\"><a href=\"#src-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%B2%B4%ED%99%94\" aria-label=\"src 폴더 구체화 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>src 폴더 구체화</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n├── components/       # 재사용 가능한 UI 컴포넌트\n├── pages/            # 주요 페이지 구성 요소\n├── hooks/            # 사용자 정의 훅\n├── services/         # API 호출 및 비즈니스 로직\n├── types/            # 타입\n├── utils/            # 유틸리티 함수\n├── context/          # React Context API 관련 코드\n└── assets/           # 이미지, 폰트, 아이콘 등 정적 리소스</code></pre></div>\n<ul>\n<li>Chat GPT에 <code class=\"language-text\">src</code> 구조를 위 처럼 확장하는 것을 추천한다. 페이지 단위로 파일을 만들고, 재사용이 가능한 컴포넌트는 따로 관리하며\n커스텀 훅도 따로 관리한다. 실제로 파일들을 넣어보자</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n├── components/       # 재사용 가능한 UI 컴포넌트\n│\t\t└── board-header.tsx\n├── pages/            # 주요 페이지 구성 요소\n│       └── board-page.tsx\n├── hooks/            # 사용자 정의 훅\n│\t\t└── use-board.ts\n├── services/         # API 호출 및 비즈니스 로직\n│\t\t└── board-api.ts\n├── types/            # 타입\n│\t\t└── board.ts\n├── utils/            # 유틸리티 함수\n│\t\t└── date-util.ts\n├── context/          # React Context API 관련 코드\n├── assets/           # 이미지, 폰트, 아이콘 등 정적 리소스\n│\t\t└── image1.png\n...</code></pre></div>\n<ul>\n<li>첫 프로젝트 때 이러한 구조가 되었었다. 게시판을 위 처럼 개발했을 때 수정이 필요한 경우\n광범위하게 흩어진 코드를 찾으러 다녀야해서 너무 힘들었다.</li>\n</ul>\n<blockquote>\n<p>그래서 생각한 것은</p>\n<ol>\n<li>URL 경로와 페이지 컴포넌트는 보통 1 : 1 이니까 경로에 맞게 폴더 구조를 만들기</li>\n<li>특성이 같고, 수정사항이 많은 파일의 경우는 같은 곳에 넣어두자</li>\n</ol>\n</blockquote>\n<h2 id=\"내가-사용하던-폴더-구조\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EA%B0%80-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8D%98-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%A1%B0\" aria-label=\"내가 사용하던 폴더 구조 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>내가 사용하던 폴더 구조</h2>\n<ul>\n<li>아래 조건들에 맞춰 <code class=\"language-text\">pages</code> 폴더를 좀더 구체화 하였다.\n<ul>\n<li>프로젝트 규모가 작다</li>\n<li>라우팅 되는 URL 경로 구조와 <code class=\"language-text\">pages</code> 폴더 구조가 같도록 한다\n<ul>\n<li>폴더로 라우팅 구조 파악 가능</li>\n</ul>\n</li>\n<li>중요 로직은 커스텀 훅에서 관리한다\n<ul>\n<li>UI와 로직 분리</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n├── components/                     # 재사용 가능한 UI 컴포넌트\n├── pages/                          # 주요 페이지 구성 요소\n│       └── board/                  # URL 경로\n│            ├── components/        # 종속된 UI 컴포넌트\n│            │    ├── hooks/        # 종속된 커스텀 훅\n│\t\t     │    │    └── use-board-header.ts\n│\t\t     │    │\n│\t\t     │    └── board-header.tsx\n│            ├── hooks/             # 종속된 커스텀 훅\n│\t\t     │    └── use-board.ts\n│            ├── schema/            # hook-form 스키마\n│\t\t     │    └── board-schema.ts\n│            ├── api/               # API 호출\n│\t\t     │    └── board-api.ts\n│            ├── models/            # 타입\n│\t\t     │    └── board.ts\n│            └── board-page.tsx\n│\n├── hooks/            # 전역으로 사용하는 사용자 정의 훅\n├── apis/             # 전역으로 사용하는 API 호출\n├── models/           # 전역으로 사용하는 타입\n├── utils/            # 유틸리티 함수\n├── assets/           # 이미지, 폰트, 아이콘 등 정적 리소스\n├── routers/          # 라우팅 관련 컴포넌트\n├── stores/           # 상태관리 라이브러리 상태\n├── App.tsx           # 최상위 컴포넌트\n└──</code></pre></div>\n<p><code class=\"language-text\">board</code> 경로에는 이제 한 곳에서 소스를 한 눈에 확인할 수 있고, 관리 포인트도 좁아졌다.\n프로젝트를 혼자하는 것도 아니고, 새로 들어오는 개발자에게 폴더 구조를 몇 시간동안 강의할 것이 아니라면\n이해가 가는 선에서 구조를 만들어주는 방향은 정말 좋은 것 같다.</p>\n<p>또한 커스텀 훅 패턴으로 훅에 로직을 모두 넣어두고 컴포넌트에서 불러오는 방식이 유지보수 방면에서 좋다고 느꼈다.\nUI 컴포넌트에서 UI 소스 부분에 서비스 로직이 들어있는 경우 소스 보기가 불편한 경우가 많았다..</p>\n<h2 id=\"유명한-FSD\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%AA%85%ED%95%9C-FSD\" aria-label=\"유명한 FSD permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>유명한 FSD</h2>\n<p>위 구조를 보면 <code class=\"language-text\">게시판</code>이라는 특징을 가진 기능을 <code class=\"language-text\">board</code> 폴더로 묶은 모습을 볼 수 있다.\n같은 특징을 가진 소스는 한 곳으로 모아두자 라는 느낌으로 묶은 것인데, <code class=\"language-text\">feature</code>와 관련된 유명한 아키텍처 방법론으로 <code class=\"language-text\">FSD</code>가 있다.\n물론 내가 사용하던 폴더 구조와는 많이 다르게 생겼다.\n<code class=\"language-text\">layer</code>로 둬서 같은 엄격하게 폴더에 들어갈 소스 위치를 구분하고 <code class=\"language-text\">feature</code>에서 기능을 묶는 방법론이다.</p>\n<p>![FSD Scheme.png](FSD Scheme.png)</p>\n<p>위 사진만으로 이해가 되지않지만, FSD 홈페이지를 가보면, 예제와 마이그레이션 방법도 친절히 나와있다.</p>\n<p><a href=\"https://feature-sliced.design/docs/guides/migration/from-v1\">FSD 마이그레이션 방법</a> 그 중에 <code class=\"language-text\">layer</code> 내용만 가져와보겠다.</p>\n<ul>\n<li>FSD Layer\n<ul>\n<li>/app — application initialization layer\n<ul>\n<li>Previous versions: app, core, init, src/index (and this happens)</li>\n</ul>\n</li>\n<li>/processes — business process layer\n<ul>\n<li>Previous versions: processes, flows, workflows</li>\n</ul>\n</li>\n<li>/pages — application page layer\n<ul>\n<li>Previous versions: pages, screens, views, layouts, components, containers</li>\n</ul>\n</li>\n<li>/features — functionality parts layer\n<ul>\n<li>Previous versions: features, components, containers</li>\n</ul>\n</li>\n<li>/entities — business entity layer\n<ul>\n<li>Previous versions: entities, models, shared</li>\n</ul>\n</li>\n<li>/shared — layer of reused infrastructure code 🔥\n<ul>\n<li>Previous versions: shared, common, lib</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>여기서 크게 <code class=\"language-text\">app / pages / features</code> 만 봐도 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/\n├── app\n│       ├── layout/\n│       ├── providers/\n│       ├── routers/\n│       └── App.tsx\n├── pages\n│       └── board/\n│            └── board-page.tsx\n├── features\n│       └── board/\n│            └── ui/\n│\t\t          └── board-header.tsx\n├── entities\n│       └── board/\n│\t\t     └── types.ts\n├── shared\n│       └── api/\n│            └── board/\n│\t\t          └── board-api.ts\n│       └── assets/\n│       └── lib/\n└──</code></pre></div>\n<p>크게 내용을 넣진 않았지만, <code class=\"language-text\">app</code> > <code class=\"language-text\">pages</code> > <code class=\"language-text\">features</code> > <code class=\"language-text\">entities</code> > <code class=\"language-text\">shared</code> 형식으로 층을 나누어서 자기보다 아래에 있는 층만\n참조해서 가져오는 방식이다.\n복잡하지만 상당히 큰 프로젝트에는 모든 기능이 나눠져있어 관리하는 부분에선 좋을 것이다.</p>\n<h2 id=\"MIT-리액트-아키텍처\" style=\"position:relative;\"><a href=\"#MIT-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"MIT 리액트 아키텍처 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>MIT 리액트 아키텍처</h2>\n<p><a href=\"https://github.com/alan2207/bulletproof-react/\">MIT 리액트 아키텍처</a></p>\n<p>리액트 아키텍처 구조를 가이드처럼 만들어둔 레포가 있다. <code class=\"language-text\">Star 29k</code> 가 넘어간 유명한 레포며, <code class=\"language-text\">feature</code>를 기준으로 폴더를 설계하였다.\n<code class=\"language-text\">nextjs 앱</code>, <code class=\"language-text\">nextjs 웹</code>, <code class=\"language-text\">react-vite</code> 세개의 구조를 보여준다.</p>\n<blockquote>\n<p>bulletproof 는 안정적인 코드를 뜻한다.</p>\n</blockquote>\n<p><img src=\"bulletproof-react.png\" alt=\"bulletproof-react.png\"></p>\n<p><code class=\"language-text\">feature</code> 폴더 하나를 기준으로 보면, 내가 사용하는 폴더구조와 비슷하게 한 곳에서 관련된 소스들을 관리한다.\n하지만 <code class=\"language-text\">FSD</code>와 비슷하게 <code class=\"language-text\">app</code> 폴더에서 어플리케이션 구조를 만든다. <code class=\"language-text\">pages</code> 폴더 없이 <code class=\"language-text\">app</code>폴더에서 모두 관리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/features/awesome-feature\n|\n+-- api         # exported API request declarations and api hooks related to a specific feature\n|\n+-- assets      # assets folder can contain all the static files for a specific feature\n|\n+-- components  # components scoped to a specific feature\n|\n+-- hooks       # hooks scoped to a specific feature\n|\n+-- stores      # state stores for a specific feature\n|\n+-- types       # typescript types used within the feature\n|\n+-- utils       # utility functions for a specific feature</code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>정리</h2>\n<p><code class=\"language-text\">FSD</code>, <code class=\"language-text\">bulletproof-react repository</code>를 구경해봤다. 현재 상황에서 어떤 폴더 구조를 따라갈지 눈에 보이기도하고,</p>","frontmatter":{"title":"React Folder","date":"March 11, 2025","update":"March 11, 2025","tags":["pang","react"],"series":"React","emoji":"🚀"},"fields":{"slug":"/react/","readingTime":{"minutes":11.565}}},"seriesList":{"edges":[{"node":{"id":"ae302bf4-08cb-5b69-bd38-5b561f7c6074","fields":{"slug":"/react/"},"frontmatter":{"title":"React Folder","emoji":"🚀"}}}]},"previous":{"fields":{"slug":"/how-to/"},"frontmatter":{"title":"어떻게 시작할까요?"}},"next":null},"pageContext":{"id":"ae302bf4-08cb-5b69-bd38-5b561f7c6074","series":"React","previousPostId":"2ccb9c5b-d1f9-5bf2-8923-62dcf0f89471","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}