{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/react/websocket/chat/","result":{"data":{"site":{"siteMetadata":{"title":"THE GREAT PANG"}},"markdownRemark":{"id":"ccc0a2e0-8c83-52a7-98bb-526889ae3a2d","excerpt":"WebSocket으로 채팅방 만들기 🧪 테스트 환경  React v18 SpringBoot v3.1.5 리액트에서 받아야 할 라이브러리 stompjs가 아닌 타입스크립트를 지원하고 최신 설계 방식을 지원하는 @stomp/stompjs 를 이용합니다. 백엔드에서 받아야할 라이브러리 배경 이전에 유튜브 좋아요가 계속 올라가는 걸 보면서 어떻게 구현됐는지 찾아…","html":"<h1 id=\"WebSocket으로-채팅방-만들기br\" style=\"position:relative;\"><a href=\"#WebSocket%EC%9C%BC%EB%A1%9C-%EC%B1%84%ED%8C%85%EB%B0%A9-%EB%A7%8C%EB%93%A4%EA%B8%B0br\" aria-label=\"WebSocket으로 채팅방 만들기br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>WebSocket으로 채팅방 만들기<br></h1>\n<h2 id=\"-테스트-환경-br\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-br\" aria-label=\" 테스트 환경 br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>🧪 테스트 환경 <br></h2>\n<blockquote>\n<p>React v18</p>\n<p>SpringBoot v3.1.5</p>\n</blockquote>\n<h2 id=\"리액트에서-받아야-할-라이브러리\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B0%9B%EC%95%84%EC%95%BC-%ED%95%A0-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"리액트에서 받아야 할 라이브러리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>리액트에서 받아야 할 라이브러리</h2>\n<p>stompjs가 아닌 타입스크립트를 지원하고 최신 설계 방식을 지원하는 @stomp/stompjs 를 이용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> sockjs-client @stomp/stompjs\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @types/stompjs @types/sockjs-client <span class=\"token parameter variable\">--dev</span></code></pre></div>\n<h2 id=\"백엔드에서-받아야할-라이브러리\" style=\"position:relative;\"><a href=\"#%EB%B0%B1%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%B0%9B%EC%95%84%EC%95%BC%ED%95%A0-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"백엔드에서 받아야할 라이브러리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>백엔드에서 받아야할 라이브러리</h2>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-websocket'</span>\t<span class=\"token comment\">// webSocket</span></code></pre></div>\n<h2 id=\"배경br\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BDbr\" aria-label=\"배경br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>배경<br></h2>\n<p>이전에 유튜브 좋아요가 계속 올라가는 걸 보면서 어떻게 구현됐는지 찾아보다가 WebSocket에 관심이 생겼다. 이를 이용해 만드는 가장 간단한 기능이 채팅방이기에 Nextjs와 WebSocket을 공부할겸 구현해보았다.</p>\n<h2 id=\"목표br\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9Cbr\" aria-label=\"목표br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>목표<br></h2>\n<p>스프링부트에서 WebSocket 기본 설정과 STOMP에 대한 Subscribe, Publish 설정 개념을 알아보고자 한다.<br>\n리액트에서 WebSocket Client의 개념과 STOMP 선언하고 연결하는 방식을 알아보고자 한다.</p>\n<h2 id=\"구현-과정br\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EA%B3%BC%EC%A0%95br\" aria-label=\"구현 과정br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>구현 과정<br></h2>\n<p>서버와 클라이언트에서 어떻게 WebSocket을 연결하고 Subscribe와 Publish에 대해 알아보고자 한다.</p>\n<p>Subscribe :</p>\n<ul>\n<li>클라이언트가 특정 서버 경로를 지속적으로 관찰하는 동작을 구독이라고 한다.</li>\n<li>클라이언트가 해당 경로를 구독하고, 해당 경로로 서버가 클라이언트로 메시지를 전달하면 구독하고 있는 클라이언트가 메시지를 수신한다.</li>\n<li>예시 경로 : /topic/chat/{roomId}, /user/queue/private<br>\nPublish :</li>\n<li>클라이언트가 서버로 메시지를 전송하는 동작을 발행이라고 한다.</li>\n<li>클라이언트가 특정 경로로 메시지를 발행하며, 서버는 이를 메시지 브로커로서 전달하고 처리한다.</li>\n<li>예시 경로 : /app/chat.send.{roomId}, /app/private-message</li>\n</ul>\n<p>서버에서 할 일</p>\n<ol>\n<li>서버에서 WebSocket 경로를 설정한다.</li>\n<li>STOMP에서 Subscribe용 prefix와 Publish용 prefix를 설정한다.</li>\n<li>클라이언트에서 메시지 Publish용 로직 처리 컨트롤러를 만든다.</li>\n</ol>\n<p>프론트에서 할 일</p>\n<ol>\n<li>WebSocket 경로를 설정한다.</li>\n<li>WebSocket 연결시 행동, 구독 경로로 메시지를 받는 경우 행동을 구현한다.</li>\n<li>메시지를 발행하는 로직을 구현한다.</li>\n</ol>\n<h2 id=\"구현br\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84br\" aria-label=\"구현br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>구현<br></h2>\n<p>브로드캐스트 메시지를 대상으로만 간단하게 구현해볼 것이다.<br>\n1:1 메시지 관련 구현은 프론트는 비슷하나 서버쪽이 조금 다르므로 추가 내용에 넣어보겠다</p>\n<h3 id=\"서버에서-할-일br\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%ED%95%A0-%EC%9D%BCbr\" aria-label=\"서버에서 할 일br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>서버에서 할 일<br></h3>\n<ol>\n<li>서버에서 WebSocket 경로를 설정한다.</li>\n<li>STOMP에서 Subscribe용 prefix와 Publish용 prefix를 설정한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebSocketMessageBrocker</span>  <span class=\"token comment\">// WebSocket STOMP 기반 메시징 서버 활성화</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSocketConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebSocketMessageBrokerConfigurer</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * 웹소켓 연결\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerStompEndpoints</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StompEndpointRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ws\"</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// 클라이언트가 사용할 웹소켓 엔드포인트</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOriginPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// cors</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withSockJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// SockJS 활성화 (웹 소켓을 지원하지 않는 경우)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 메시지 브로커 설정 (클라이언트 입장에서 구독/발행이란 뜻)\n     * STOMP endpoint 설정 커스터마이징\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureMessageBroker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBrokerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token comment\">// Subscribe 구독용 prefix (서버 -> 클라이언트)</span>\n\t\t    <span class=\"token comment\">// topic은 브로드캐스트 메시지용 prefix</span>\n\t\t    <span class=\"token comment\">// queue는 1:1 메시지용 prefix</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">enableSimpleBroker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/topic\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/queue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Publish 발행용 prefix (클라이언트 -> 서버)</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationDestinationPrefixes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol>\n<li>클라이언트에서 메시지 Publish용 로직 처리 컨트롤러를 만든다.\n<ul>\n<li>메시지 발행 방법은 두 가지가 있다. 위에서 설정한 브로드캐스트 메시지, 1:1 메시지</li>\n<li><code class=\"language-text\">/topic</code> 으로 설정한 메시지 발행은 브로드캐스트 메시지로 광역으로 나간다.</li>\n<li><code class=\"language-text\">/queue</code> 으로 설정한 메시지 발행은 1:1 메시지로, 세션 기반으로 발행이 된다.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChatMessageController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@MessageMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/chat.send.{roomId}\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 메시지 보낼 URL 경로, 실제론 /app/chat.send.{roomId}</span>\n    <span class=\"token annotation punctuation\">@SendTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/topic/chatroom/{roomId}\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 구독 경로 해당 URL로 메시지를 받을 수 있음</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ChatMessage</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@DestinationVariable</span> <span class=\"token class-name\">Long</span> roomId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChatMessage</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setRoomId</span><span class=\"token punctuation\">(</span>roomId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setSentAt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 브로드캐스트 메시지 전송</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"11-메시지-구독-및-발행-추가-내용\" style=\"position:relative;\"><a href=\"#11-%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B5%AC%EB%8F%85-%EB%B0%8F-%EB%B0%9C%ED%96%89-%EC%B6%94%EA%B0%80-%EB%82%B4%EC%9A%A9\" aria-label=\"11 메시지 구독 및 발행 추가 내용 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1:1 메시지 구독 및 발행 추가 내용</h3>\n<p>세션을 이용해 수신자에게 메시지를 전달한다. 그래서 JWT만 사용하는 경우 따로 HandShakeInterceptor를 구현하여 beforeHandshake, afterHandshake를 구현하여 JWT 토큰을 검증해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">@Controller\n@RequiredArgsConstructor\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChatMessageController</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">MessageMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/private-message\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendPrivateMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">PrivateMessage message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 1:1 메시지 전달</span>\n\t\t    messagingTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSendToUser</span><span class=\"token punctuation\">(</span>\n\t\t        message<span class=\"token punctuation\">.</span><span class=\"token function\">getRecipient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 수신자 ID</span>\n\t\t        <span class=\"token string\">\"/queue/private\"</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 목적지 (Spring이 자동으로 /user 추가)</span>\n\t\t        message                 <span class=\"token comment\">// 전송할 메시지</span>\n\t\t    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"프론트에서-할-일br\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A0-%EC%9D%BCbr\" aria-label=\"프론트에서 할 일br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>프론트에서 할 일<br></h3>\n<ol>\n<li>WebSocket 경로를 설정한다.</li>\n<li>WebSocket 연결시 행동, 구독 경로로 메시지를 받는 경우 행동을 구현한다.</li>\n<li>메시지를 발행하는 로직을 구현한다.</li>\n</ol>\n<h4 id=\"메시지-구독시-행동과-메시지-발행하는-로직을-가지고있는-CustomHook\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B5%AC%EB%8F%85%EC%8B%9C-%ED%96%89%EB%8F%99%EA%B3%BC-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B0%9C%ED%96%89%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0%EC%9E%88%EB%8A%94-CustomHook\" aria-label=\"메시지 구독시 행동과 메시지 발행하는 로직을 가지고있는 CustomHook permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>메시지 구독시 행동과 메시지 발행하는 로직을 가지고있는 CustomHook</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UseWebSocketClientProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onMessage</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">subscribeUrl</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">publishUrl</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useWebSocketClient</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n\tonMessage<span class=\"token punctuation\">,</span>\n\tpublishUrl<span class=\"token punctuation\">,</span>\n\tsubscribeUrl<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> UseWebSocketClientProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> clientRef <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span>Client <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function-variable function\">webSocketFactory</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">SockJS</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8080/ws'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 웹소켓 첫 연결 경로</span>\n\n\t\t\t<span class=\"token function-variable function\">onConnect</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 연결이 된 경우 구독부터 하여 메시지 받을 준비를 한다.</span>\n\t\t\t\t<span class=\"token comment\">// 구독 경로와 구독의 콜백함수 설정하여 메시지가 온 경우 할 행동</span>\n\t\t\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscribeUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">const</span> received <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>received<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메시지가 오면 처리하는 로직</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tclentRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> clent<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tclient<span class=\"token punctuation\">.</span><span class=\"token function\">deactivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>onMessage<span class=\"token punctuation\">,</span> publishUrl<span class=\"token punctuation\">,</span> subscribeUrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> ChatMessage</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clentRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&amp;&amp;</span> clentRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>connected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tclentRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">destination</span><span class=\"token operator\">:</span> publishUrl<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WebSocket is not connected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> sendMessage <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"메시지-목록과-전송-인풋\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%AA%A9%EB%A1%9D%EA%B3%BC-%EC%A0%84%EC%86%A1-%EC%9D%B8%ED%92%8B\" aria-label=\"메시지 목록과 전송 인풋 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>메시지 목록과 전송 인풋</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ChatView</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> roomId<span class=\"token punctuation\">,</span> chatRoomData <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ChatViewProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// 구독된 경로로 메시지가 온 경우</span>\n\tcont <span class=\"token function-variable function\">handleMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> ChatMessage</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sendMessage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useWebSocketClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">onMessage</span><span class=\"token operator\">:</span> handleMessage<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">publishUrl</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/app/chat.sent.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>roomId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">subscribeUrl</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/topic/chatroom/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>roomId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>ChatMessage<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">messag</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">chatMessage</span><span class=\"token operator\">:</span> ChatMessage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\troomId<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">sender</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>유저 아이디<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> message<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>chatMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;</span>div\n\t\t\t\t\t  key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>msg<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n\t\t\t\t\t  style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">justifyContent</span><span class=\"token operator\">:</span>\n                  msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">===</span> <span class=\"token punctuation\">{</span>유저아이디<span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token string\">'flex-end'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'justify-start'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token operator\">></span>\n\t\t\t\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">{</span>msg<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token operator\">&lt;</span>ChatInput onSendMessage<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSendMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChatInputProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onSendMessage</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ChatInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSendMessage <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ChatInputProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSendMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">onSendMessage</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n        placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"메시지 입력\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        onKeyDown<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'Enter'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">handleSendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSendMessage<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        전송\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"결론br\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0br\" aria-label=\"결론br permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>결론<br></h2>\n<p>WebSocket의 개념 STOMP 프로토콜과 함께 subscribe와 publish 개념을 이해하게 되는 구현이었다.<br>\n지금은 간단하게 채팅을 구현해봤기 때문에 채팅방에 참여했을 때만 메시지 내용을 알 수 있다. 이후 채팅방에서 이전 대화 목록을 가져오는 내용까지 구현하고, 1:1 메시지 발행을 이용해 알림 기능까지 만들 계획이다.</p>","frontmatter":{"title":"WebSocket으로 채팅 기능 만들어보자","date":"May 22, 2025","update":"May 22, 2025","tags":["react","springboot","websocket"],"series":"WebSocket","emoji":"💬"},"fields":{"slug":"/posts/react/websocket/chat/","readingTime":{"minutes":8.695}}},"seriesList":{"edges":[{"node":{"id":"33b932dd-c396-5a98-b04b-860529a16110","fields":{"slug":"/posts/react/websocket/"},"frontmatter":{"title":"WebSocket에 대해 알아보자","emoji":"💬"}}},{"node":{"id":"ccc0a2e0-8c83-52a7-98bb-526889ae3a2d","fields":{"slug":"/posts/react/websocket/chat/"},"frontmatter":{"title":"WebSocket으로 채팅 기능 만들어보자","emoji":"💬"}}}]},"previous":{"fields":{"slug":"/posts/react/websocket/"},"frontmatter":{"title":"WebSocket에 대해 알아보자"}},"next":null},"pageContext":{"id":"ccc0a2e0-8c83-52a7-98bb-526889ae3a2d","series":"WebSocket","previousPostId":"33b932dd-c396-5a98-b04b-860529a16110","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}