{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/react/react-prevent-navigate/","result":{"data":{"site":{"siteMetadata":{"title":"THE GREAT PANG"}},"markdownRemark":{"id":"e5e3cc9b-bd18-5abd-8f75-150cd5339f08","excerpt":"리액트에서 URL 이동시 감지하여 원하는 로직을 넣어보자 🧪 테스트 환경 React v18 배경 요청사항으로 페이지 내에서 수정이 일어난 경우 URL을 이동하려고 할 시 confirm 창을 띄워 정말 이동하고 싶은건지 물어보는 기능이 필요하다고 한다. 리액트에서 제공해주는 방식이 없기 때문에 기능을 구현하고자 한다. 목표 리액트에서 URL을 이동할 수 있…","html":"<h1 id=\"리액트에서-URL-이동시-감지하여-원하는-로직을-넣어보자\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-URL-%EC%9D%B4%EB%8F%99%EC%8B%9C-%EA%B0%90%EC%A7%80%ED%95%98%EC%97%AC-%EC%9B%90%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81%EC%9D%84-%EB%84%A3%EC%96%B4%EB%B3%B4%EC%9E%90\" aria-label=\"리액트에서 URL 이동시 감지하여 원하는 로직을 넣어보자 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>리액트에서 URL 이동시 감지하여 원하는 로직을 넣어보자</h1>\n<h2 id=\"-테스트-환경\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\" 테스트 환경 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>🧪 테스트 환경</h2>\n<blockquote>\n<p>React v18</p>\n</blockquote>\n<h2 id=\"배경\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EA%B2%BD\" aria-label=\"배경 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>배경</h2>\n<p>요청사항으로 페이지 내에서 수정이 일어난 경우 URL을 이동하려고 할 시 confirm 창을 띄워 정말 이동하고 싶은건지 물어보는 기능이 필요하다고 한다.</p>\n<p>리액트에서 제공해주는 방식이 없기 때문에 기능을 구현하고자 한다.</p>\n<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>목표</h2>\n<p>리액트에서 URL을 이동할 수 있는 방법은 <code class=\"language-text\">Link 컴포넌트</code>, <code class=\"language-text\">useNavigate</code>, 뒤로가기, 새로고침, 앞으로가기가 있다.</p>\n<ol>\n<li>제어가 안되는 <code class=\"language-text\">useNavigate</code> 훅과 <code class=\"language-text\">Link</code> 컴포넌트를 다른 방식으로 동작하도록 할 것</li>\n<li>뒤로가기와 새로고침의 경우 브라우저의 이벤트를 이용하여 막을 것</li>\n</ol>\n<h2 id=\"기능-추가\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\" aria-label=\"기능 추가 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>기능 추가</h2>\n<ol>\n<li>\n<p>뒤로가기, 새로고침 이벤트 설정</p>\n<p>뒤로가기와 새로고침을 막고자 하는 컴포넌트에 커스텀 훅을 넣어줘서 동작을 제어해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//usePreventRefresh.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">usePreventPageExit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> isModified <span class=\"token operator\">=</span>\n <span class=\"token comment\">/* 이곳에는 isModified를 전역으로 관리할 수 있는 방법을 이용한다.\n  * 상태값보단 불필요한 렌더링을 일으키지 않는 useRef 객체를 이용는 것을 추천합니다.\n  */</span>\n\n <span class=\"token comment\">// 새로고침 이벤트 핸들러 함수</span>\n <span class=\"token comment\">// 새로고침시 이벤트를 막는다면, 브라우저에서 지정해놓은 confirm 창이 뜬다.</span>\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleBeforeunload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isModified<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     event<span class=\"token punctuation\">.</span>returnValue <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// 뒤로가기 이벤트 핸들러 함수</span>\n <span class=\"token comment\">/* 방식\n  * 1. 첫 화면 렌더링시 window의 history 객체에 현재 주소로된 이력을 넣는다.\n  * 2. 뒤로가기 클릭시 이전 이력이 현재 주소이기 때문에 브라우저 화면이 다시\n       로드되지  않고, 현재 화면에 그대로 있는다.\n  * 3. window의 history 객체에 현재 주소로된 이력을 한 번 더 넣는다.\n  * 4. 사용자의 yes, no 클릭을 이용해 다음 행동을 결정짓는다.\n  * 4-1. yes 클릭\n     현재 히스토리에는 3번에서 넣은 이력으로 인해 2번 뒤로가도록 한다.\n    4-2. no 클릭\n     히스토리에 현재 주소 이력이 있어야하기 때문에 아무일도 일어나지 않는다.\n  */</span>\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handlePopstate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isModified<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'뒤로가시겠습니까? 작성된 내용은 저장이 되지 않습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// 컴포넌트가 마운트되면 이벤트 생성 및 현재 주소 이력 추가</span>\n   window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeunload'</span><span class=\"token punctuation\">,</span> handleBeforeunload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popstate'</span><span class=\"token punctuation\">,</span> handlePopstate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// 컴포넌트가 언마운트되면 이벤트를 제거한다.</span>\n     window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeunload'</span><span class=\"token punctuation\">,</span> handleBeforeunload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popstate'</span><span class=\"token punctuation\">,</span> handlePopstate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">useNavigate</code> 훅 커스텀</p>\n</li>\n</ol>\n<p><code class=\"language-text\">navigate('???')</code> 방식으로 리액트에서 페이지 이동을 시킨 경험이 있을 것 입니다. 위 처럼 페이지 이동시에 이벤트를 감지해서 막을 수 있지 않을까? 라는 생각을 했으면 바람직한 생각입니다. 그러나 <code class=\"language-text\">navigate</code> 함수가 실행이 되면, 중간에서 이벤트로 막을수가 없기 때문에 훅을 커스텀해서 사용해야 합니다. 저는 아래와 같이 사용했지만 절대로 정답은 아닙니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useCustomNavigate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isModified <span class=\"token operator\">=</span>\n    <span class=\"token comment\">/* 이곳에는 isModified를 전역으로 관리할 수 있는 방법을 이용한다.\n     * 상태값보단 불필요한 렌더링을 일으키지 않는 useRef 객체를 이용는 것을 추천합니다.\n     */</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">customNavigate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> To<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> NavigateOptions<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isModified<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이동하시겠습니까? 작성된 내용은 저장이 되지 않습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          isModified <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> customNavigate<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">useCustomNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"3\">\n<li>\n<p>사용 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BoardRegistPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useCustomNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> isModified <span class=\"token operator\">=</span>\n   <span class=\"token comment\">/* 이곳에는 isModified를 전역으로 관리할 수 있는 방법을 이용한다.\n    * 상태값보단 불필요한 렌더링을 일으키지 않는 useRef 객체를 이용는 것을 추천합니다.\n    */</span>\n\n   <span class=\"token comment\">// 수정이 되었을 때 부터 이동 감지를 하고자 원한다면 이런 방식으로,</span>\n   <span class=\"token comment\">// 컴포넌트가 마운트 되자마자 막고 싶다면, useEffect를 이용</span>\n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     isModified <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n     <span class=\"token operator\">...</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">// isModified가 true면, navigate 함수에서 이동을 막는 로직이 실행된다.</span>\n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n       <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Link 컴포넌트는 to에 이동하지 않도록 #을 넣어주고, 이동 방식은 onClick을 이용하여 이동을 막도록 한다.*/</span><span class=\"token punctuation\">}</span>\n       <span class=\"token operator\">&lt;</span>Link\n         to<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span>\n         onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span>\n       <span class=\"token operator\">></span>이동<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n\n       <span class=\"token operator\">...</span>\n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>전역으로 사용할 변수 <code class=\"language-text\">isModified</code></li>\n</ol>\n<p><code class=\"language-text\">isModified</code> 는 전역으로 사용할 변수를 이용한다.</p>\n<ol>\n<li>컴포넌트 밖에서 선언한 let 변수 (권장안함)</li>\n<li>상태관리 라이브러리 (zustand, Redux 등) (상태값으로 선언시 불필요한 리렌더링 유발)</li>\n<li><code class=\"language-text\">useRef</code> 객체 (권장)</li>\n</ol>\n<p>위 내용을 기반으로 <code class=\"language-text\">Context</code> 에 <code class=\"language-text\">useRef</code> 객체로 선언된 <code class=\"language-text\">isModified</code>를 불러와서 사용하자.</p>\n<p>이 경우 불필요한 리렌더링을 안하기 때문에 편리하게 사용할 수 있고, 어디서든 불러와서 사용할 수 있다.</p>\n</li>\n</ol>","frontmatter":{"title":"리액트에서 뒤로가기, 새로고침, 페이지 이동을 감지해보자","date":"April 02, 2025","update":"April 02, 2025","tags":["react"],"series":"React","emoji":"🚀"},"fields":{"slug":"/posts/react/react-prevent-navigate/","readingTime":{"minutes":6.84}}},"seriesList":{"edges":[{"node":{"id":"63a9f073-5100-5981-9764-db4220aed1e2","fields":{"slug":"/posts/react/react-folder/"},"frontmatter":{"title":"React Folder","emoji":"🚀"}}},{"node":{"id":"e5e3cc9b-bd18-5abd-8f75-150cd5339f08","fields":{"slug":"/posts/react/react-prevent-navigate/"},"frontmatter":{"title":"리액트에서 뒤로가기, 새로고침, 페이지 이동을 감지해보자","emoji":"🚀"}}},{"node":{"id":"635aadbd-00fa-5641-9eed-ffd20ce49109","fields":{"slug":"/posts/react/crlf/"},"frontmatter":{"title":"CRLF LF","emoji":"🚀"}}}]},"previous":{"fields":{"slug":"/posts/how-to/giscus/"},"frontmatter":{"title":"giscus 시작하기"}},"next":{"fields":{"slug":"/posts/react/crlf/"},"frontmatter":{"title":"CRLF LF","emoji":"🚀"}}},"pageContext":{"id":"e5e3cc9b-bd18-5abd-8f75-150cd5339f08","series":"React","previousPostId":"6275e3c9-54c4-55b6-8d05-f53fea77956f","nextPostId":"635aadbd-00fa-5641-9eed-ffd20ce49109"}},"staticQueryHashes":[],"slicesMap":{}}